CREATE EXTENSION http;
SET http.server_host = 'http://localhost:9080';
set http.timeout_msec = 10000;
SELECT http_set_curlopt('CURLOPT_TIMEOUT', '10');
 http_set_curlopt 
------------------
 t
(1 row)

-- if local server not up use global one
DO language plpgsql $$
BEGIN
  BEGIN
    PERFORM http_get(current_setting('http.server_host') || '/status/202');
  EXCEPTION WHEN OTHERS THEN
    SET http.server_host = 'http://httpbin.org';
  END;
END;
$$;
-- Status code
SELECT status
FROM http_get(current_setting('http.server_host') || '/status/202');
 status 
--------
    202
(1 row)

-- Headers
SELECT lower(field) AS field, value
FROM (
	SELECT (unnest(headers)).*
	FROM http_get(current_setting('http.server_host') || '/response-headers?Abcde=abcde')
) a
WHERE field ILIKE 'Abcde';
 field | value 
-------+-------
 abcde | abcde
(1 row)

-- GET
SELECT status,
content::json->'args'->>'foo' AS args,
content::json->>'method' AS method
FROM http_get(current_setting('http.server_host') || '/anything?foo=bar');
 status | args | method 
--------+------+--------
    200 | bar  | GET
(1 row)

-- GET with data
SELECT status,
content::json->'args'->>'this' AS args,
replace(content::json->>'url',current_setting('http.server_host'),'') AS path,
content::json->>'method' AS method
FROM http_get(current_setting('http.server_host') || '/anything', jsonb_build_object('this', 'that'));
 status | args |        path         | method 
--------+------+---------------------+--------
    200 | that | /anything?this=that | GET
(1 row)

-- GET with data
SELECT status,
content::json->>'args' as args,
(content::json)->>'data' as data,
content::json->>'method' as method
FROM http(('GET', current_setting('http.server_host') || '/anything', NULL, 'application/json', '{"search": "toto"}'));
 status | args |        data        | method 
--------+------+--------------------+--------
    200 | {}   | {"search": "toto"} | GET
(1 row)

-- DELETE
SELECT status,
content::json->'args'->>'foo' AS args,
replace(content::json->>'url',current_setting('http.server_host'),'') AS path,
content::json->>'method' AS method
FROM http_delete(current_setting('http.server_host') || '/anything?foo=bar');
 status | args |       path        | method 
--------+------+-------------------+--------
    200 | bar  | /anything?foo=bar | DELETE
(1 row)

-- DELETE with payload
SELECT status,
content::json->'args'->>'foo' AS args,
replace(content::json->>'url',current_setting('http.server_host'),'') AS path,
content::json->>'method' AS method,
content::json->>'data' AS data
FROM http_delete(current_setting('http.server_host') || '/anything?foo=bar', 'payload', 'text/plain');
 status | args |       path        | method |  data   
--------+------+-------------------+--------+---------
    200 | bar  | /anything?foo=bar | DELETE | payload
(1 row)

-- PUT
SELECT status,
content::json->>'data' AS data,
content::json->'args'->>'foo' AS args,
replace(content::json->>'url', current_setting('http.server_host'),'') AS path,
content::json->>'method' AS method
FROM http_put(current_setting('http.server_host') || '/anything?foo=bar','payload','text/plain');
 status |  data   | args |       path        | method 
--------+---------+------+-------------------+--------
    200 | payload | bar  | /anything?foo=bar | PUT
(1 row)

-- PATCH
SELECT status,
content::json->>'data' AS data,
content::json->'args'->>'foo' AS args,
replace(content::json->>'url', current_setting('http.server_host'),'') AS path,
content::json->>'method' AS method
FROM http_patch(current_setting('http.server_host') || '/anything?foo=bar','{"this":"that"}','application/json');
 status |      data       | args |       path        | method 
--------+-----------------+------+-------------------+--------
    200 | {"this":"that"} | bar  | /anything?foo=bar | PATCH
(1 row)

-- POST
SELECT status,
content::json->>'data' AS data,
content::json->'args'->>'foo' AS args,
replace(content::json->>'url', current_setting('http.server_host'),'') AS path,
content::json->>'method' AS method
FROM http_post(current_setting('http.server_host') || '/anything?foo=bar','payload','text/plain');
 status |  data   | args |       path        | method 
--------+---------+------+-------------------+--------
    200 | payload | bar  | /anything?foo=bar | POST
(1 row)

-- POST with json data
SELECT status,
content::json->'form'->>'this' AS args,
replace(content::json->>'url', current_setting('http.server_host'),'') AS path,
content::json->>'method' AS method
FROM http_post(current_setting('http.server_host') || '/anything', jsonb_build_object('this', 'that'));
 status | args |   path    | method 
--------+------+-----------+--------
    200 | that | /anything | POST
(1 row)

-- POST with data
SELECT status,
content::json->'form'->>'key1' AS key1,
content::json->'form'->>'key2' AS key2,
replace(content::json->>'url', current_setting('http.server_host'),'') AS path,
content::json->>'method' AS method
FROM http_post(current_setting('http.server_host') || '/anything', 'key1=value1&key2=value2','application/x-www-form-urlencoded');
 status |  key1  |  key2  |   path    | method 
--------+--------+--------+-----------+--------
    200 | value1 | value2 | /anything | POST
(1 row)

-- HEAD
SELECT lower(field) AS field, value
FROM (
	SELECT (unnest(headers)).*
	FROM http_head(current_setting('http.server_host') || '/response-headers?Abcde=abcde')
) a
WHERE field ILIKE 'Abcde';
 field | value 
-------+-------
 abcde | abcde
(1 row)

-- Follow redirect
SELECT status,
replace((content::json)->>'url', current_setting('http.server_host'),'') AS path
FROM http_get(current_setting('http.server_host') || '/redirect-to?url=get');
 status | path 
--------+------
    200 | /get
(1 row)

-- Request image
WITH
  http AS (
    SELECT * FROM http_get(current_setting('http.server_host') || '/image/png')
  ),
  headers AS (
    SELECT (unnest(headers)).* FROM http
  )
SELECT
  http.content_type,
  length(text_to_bytea(http.content)) AS length_binary
FROM http, headers
WHERE field ilike 'Content-Type';
 content_type | length_binary 
--------------+---------------
 image/png    |          8090
(1 row)

-- Alter options and and reset them and throw errors
SELECT http_set_curlopt('CURLOPT_PROXY', '127.0.0.1');
 http_set_curlopt 
------------------
 t
(1 row)

-- Error because proxy is not there
DO $$
BEGIN
    SELECT status FROM http_get(current_setting('http.server_host') || '/status/555');
EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING 'Failed to connect';
END;
$$;
WARNING:  Failed to connect
-- Still an error
DO $$
BEGIN
    SELECT status FROM http_get(current_setting('http.server_host') || '/status/555');
EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING 'Failed to connect';
END;
$$;
WARNING:  Failed to connect
-- Reset options
SELECT http_reset_curlopt();
 http_reset_curlopt 
--------------------
 t
(1 row)

-- Now it should work
SELECT status FROM http_get(current_setting('http.server_host') || '/status/555');
 status 
--------
    555
(1 row)

-- Alter the default timeout and then run a query that is longer than
-- the default (5s), but shorter than the new timeout
SELECT http_set_curlopt('CURLOPT_TIMEOUT_MS', '10000');
 http_set_curlopt 
------------------
 t
(1 row)

SELECT status FROM http_get(current_setting('http.server_host') || '/delay/7');
 status 
--------
    200
(1 row)

-- Test new GUC feature
SET http.CURLOPT_TIMEOUT_MS = '10';
-- should fail
-- Still an error
DO $$
BEGIN
    SELECT status FROM http_get(current_setting('http.server_host') || '/delay/7');
EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING 'Failed to connect';
END;
$$;
WARNING:  Failed to connect
SET http.CURLOPT_TIMEOUT_MS = '10000';
--should pass
SELECT status FROM http_get(current_setting('http.server_host') || '/delay/7');
 status 
--------
    200
(1 row)

-- SET to bogus file
SET http.CURLOPT_CAINFO = '/path/to/somebundle.crt';
-- should fail
DO $$
BEGIN
   SELECT status FROM http_get('https://postgis.net');
EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING 'Invalid cert file';
END;
$$;
WARNING:  Invalid cert file
-- set to ignore cert
SET http.CURLOPT_SSL_VERIFYPEER = '0';
-- should pass
SELECT status FROM http_get('https://postgis.net');
 status 
--------
    200
(1 row)

SHOW http.CURLOPT_CAINFO;
   http.curlopt_cainfo   
-------------------------
 /path/to/somebundle.crt
(1 row)

-- reset it
RESET http.CURLOPT_CAINFO;
SHOW http.CURLOPT_CAINFO;
 http.curlopt_cainfo 
---------------------
 
(1 row)

